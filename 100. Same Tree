public class learning1 {
	public static void main(String[] args){
		TreeNode a = new TreeNode(1);
		TreeNode b = new TreeNode(2);
		TreeNode c = new TreeNode(3);
		TreeNode d = new TreeNode(4);
		TreeNode e = new TreeNode(5);
		a.left = b;
		a.right = c;
		b.left = d;
		b.right =e;
		
		TreeNode aa = new TreeNode(1);
		TreeNode bb = new TreeNode(2);
		TreeNode cc = new TreeNode(3);
		TreeNode dd = new TreeNode(4);
		TreeNode ee = new TreeNode(5);
		aa.left = bb;
		aa.right = cc;
		bb.left = dd;
		cc.left = ee;
		
		System.out.println(isSameTree(a,aa));
	}
	
	public static boolean isSameTree(TreeNode p, TreeNode q) {
		if (p==null && q==null){
			return true;
		}else if (p==null || q==null || p.val!=q.val){
			return false;
		}else{
			//do nothing
		}
		
		Deque<TreeNode> queue1 = new LinkedList<>();
		Deque<TreeNode> queue2 = new LinkedList<>();
		
		queue1.push(p);
		queue2.push(q);
		
		while(!queue1.isEmpty()&&!queue2.isEmpty()){
			TreeNode currentNode1 = queue1.pop();
			TreeNode currentNode2 = queue2.pop();
			TreeNode left1 = currentNode1.left;
			TreeNode left2 = currentNode2.left;
			TreeNode right1 = currentNode1.right;
			TreeNode right2 = currentNode2.right;
			
			if(left1 == null && left2 == null){
				//do nothing
			}else if(left1 == null || left2 == null || left1.val != left2.val){
				return false;
			}else{ //which imply its equal
				queue1.addLast(left1);
				queue2.addLast(left2);
			}
			
			if(right1 == null && right2 == null){
				//do nothing
			}else if(right1 == null || right2 == null || right1.val != right2.val){
				return false;
			}else{ //which imply its equal
				queue1.addLast(right1);
				queue2.addLast(right2);
			}
			
		}
		return true;
    }
	
}


class TreeNode {
	 int val;
	 TreeNode left;
	 TreeNode right;
	 TreeNode(int x) { 
		 val = x;
		 left = null;
		 right = null;
	 }
}
