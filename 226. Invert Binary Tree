package learning;
import java.util.*;

public class learning1 {
	public static void main(String[] args){
		TreeNode a = new TreeNode(1);
		TreeNode b = new TreeNode(2);
		TreeNode c = new TreeNode(3);
		TreeNode d = new TreeNode(4);
		TreeNode e = new TreeNode(5);
		TreeNode f = new TreeNode(6);
		TreeNode g = new TreeNode(7);
		a.left = b;
		a.right = c;
		b.left = d;
		b.right = e;
		c.left = f;
		c.right = g;
		TreeNode answer = invertTree(a);
		
		display(answer);
		
		
	}
	
	public static void display(TreeNode focusNode){
		
		Deque<TreeNode> stack = new LinkedList<>();
		stack.push(focusNode);
		while (!stack.isEmpty()){
			TreeNode currentNode = stack.pop();
			System.out.println(currentNode.val);
			if(currentNode.left!=null){
				stack.addLast(currentNode.left);
			}
			if(currentNode.right!=null){
				stack.addLast(currentNode.right);
			}
		}
		
	}
	
	
	public static TreeNode invertTree(TreeNode root){
		if (root == null) return null;
		
		Deque<TreeNode> myQueue = new LinkedList<>();
		myQueue.addLast(root);
		
		while(!myQueue.isEmpty()){
			TreeNode currentNode = myQueue.pop();
			TreeNode temp = currentNode.left;
			currentNode.left = currentNode.right;
			currentNode.right = temp;
			
			if (currentNode.left != null){
				myQueue.addLast(currentNode.left);
			}
			if (currentNode.right != null){
				myQueue.addLast(currentNode.right);
			}
		
		}
		return root;
		
			
	}
}		

	


class TreeNode{
	int val;
	TreeNode left;
	TreeNode right;
	TreeNode(int x) {
		val = x;
		left = null;
		right = null;
	}
}
